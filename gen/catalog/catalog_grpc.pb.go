// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: catalog/catalog.proto

package catalog

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CatalogService_CreateAct_FullMethodName  = "/catalog.CatalogService/CreateAct"
	CatalogService_UpdateAct_FullMethodName  = "/catalog.CatalogService/UpdateAct"
	CatalogService_GetAct_FullMethodName     = "/catalog.CatalogService/GetAct"
	CatalogService_GetActs_FullMethodName    = "/catalog.CatalogService/GetActs"
	CatalogService_DeleteAct_FullMethodName  = "/catalog.CatalogService/DeleteAct"
	CatalogService_CreateMany_FullMethodName = "/catalog.CatalogService/CreateMany"
)

// CatalogServiceClient is the client API for CatalogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CatalogServiceClient interface {
	CreateAct(ctx context.Context, in *CreateActRequest, opts ...grpc.CallOption) (*CreateActResponse, error)
	UpdateAct(ctx context.Context, in *UpdateActRequest, opts ...grpc.CallOption) (*UpdateActResponse, error)
	GetAct(ctx context.Context, in *GetActRequest, opts ...grpc.CallOption) (*GetActResponse, error)
	GetActs(ctx context.Context, in *GetActsRequest, opts ...grpc.CallOption) (*GetActsResponse, error)
	DeleteAct(ctx context.Context, in *DeleteActRequest, opts ...grpc.CallOption) (*DeleteActResponse, error)
	CreateMany(ctx context.Context, in *CreateManyRequest, opts ...grpc.CallOption) (*CreateManyResponse, error)
}

type catalogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCatalogServiceClient(cc grpc.ClientConnInterface) CatalogServiceClient {
	return &catalogServiceClient{cc}
}

func (c *catalogServiceClient) CreateAct(ctx context.Context, in *CreateActRequest, opts ...grpc.CallOption) (*CreateActResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateActResponse)
	err := c.cc.Invoke(ctx, CatalogService_CreateAct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) UpdateAct(ctx context.Context, in *UpdateActRequest, opts ...grpc.CallOption) (*UpdateActResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateActResponse)
	err := c.cc.Invoke(ctx, CatalogService_UpdateAct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) GetAct(ctx context.Context, in *GetActRequest, opts ...grpc.CallOption) (*GetActResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetActResponse)
	err := c.cc.Invoke(ctx, CatalogService_GetAct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) GetActs(ctx context.Context, in *GetActsRequest, opts ...grpc.CallOption) (*GetActsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetActsResponse)
	err := c.cc.Invoke(ctx, CatalogService_GetActs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) DeleteAct(ctx context.Context, in *DeleteActRequest, opts ...grpc.CallOption) (*DeleteActResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteActResponse)
	err := c.cc.Invoke(ctx, CatalogService_DeleteAct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) CreateMany(ctx context.Context, in *CreateManyRequest, opts ...grpc.CallOption) (*CreateManyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateManyResponse)
	err := c.cc.Invoke(ctx, CatalogService_CreateMany_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CatalogServiceServer is the server API for CatalogService service.
// All implementations must embed UnimplementedCatalogServiceServer
// for forward compatibility.
type CatalogServiceServer interface {
	CreateAct(context.Context, *CreateActRequest) (*CreateActResponse, error)
	UpdateAct(context.Context, *UpdateActRequest) (*UpdateActResponse, error)
	GetAct(context.Context, *GetActRequest) (*GetActResponse, error)
	GetActs(context.Context, *GetActsRequest) (*GetActsResponse, error)
	DeleteAct(context.Context, *DeleteActRequest) (*DeleteActResponse, error)
	CreateMany(context.Context, *CreateManyRequest) (*CreateManyResponse, error)
	mustEmbedUnimplementedCatalogServiceServer()
}

// UnimplementedCatalogServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCatalogServiceServer struct{}

func (UnimplementedCatalogServiceServer) CreateAct(context.Context, *CreateActRequest) (*CreateActResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAct not implemented")
}
func (UnimplementedCatalogServiceServer) UpdateAct(context.Context, *UpdateActRequest) (*UpdateActResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAct not implemented")
}
func (UnimplementedCatalogServiceServer) GetAct(context.Context, *GetActRequest) (*GetActResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAct not implemented")
}
func (UnimplementedCatalogServiceServer) GetActs(context.Context, *GetActsRequest) (*GetActsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActs not implemented")
}
func (UnimplementedCatalogServiceServer) DeleteAct(context.Context, *DeleteActRequest) (*DeleteActResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAct not implemented")
}
func (UnimplementedCatalogServiceServer) CreateMany(context.Context, *CreateManyRequest) (*CreateManyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMany not implemented")
}
func (UnimplementedCatalogServiceServer) mustEmbedUnimplementedCatalogServiceServer() {}
func (UnimplementedCatalogServiceServer) testEmbeddedByValue()                        {}

// UnsafeCatalogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CatalogServiceServer will
// result in compilation errors.
type UnsafeCatalogServiceServer interface {
	mustEmbedUnimplementedCatalogServiceServer()
}

func RegisterCatalogServiceServer(s grpc.ServiceRegistrar, srv CatalogServiceServer) {
	// If the following call pancis, it indicates UnimplementedCatalogServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CatalogService_ServiceDesc, srv)
}

func _CatalogService_CreateAct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateActRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).CreateAct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_CreateAct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).CreateAct(ctx, req.(*CreateActRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_UpdateAct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateActRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).UpdateAct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_UpdateAct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).UpdateAct(ctx, req.(*UpdateActRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_GetAct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).GetAct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_GetAct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).GetAct(ctx, req.(*GetActRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_GetActs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).GetActs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_GetActs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).GetActs(ctx, req.(*GetActsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_DeleteAct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteActRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).DeleteAct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_DeleteAct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).DeleteAct(ctx, req.(*DeleteActRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_CreateMany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateManyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).CreateMany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_CreateMany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).CreateMany(ctx, req.(*CreateManyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CatalogService_ServiceDesc is the grpc.ServiceDesc for CatalogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CatalogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "catalog.CatalogService",
	HandlerType: (*CatalogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAct",
			Handler:    _CatalogService_CreateAct_Handler,
		},
		{
			MethodName: "UpdateAct",
			Handler:    _CatalogService_UpdateAct_Handler,
		},
		{
			MethodName: "GetAct",
			Handler:    _CatalogService_GetAct_Handler,
		},
		{
			MethodName: "GetActs",
			Handler:    _CatalogService_GetActs_Handler,
		},
		{
			MethodName: "DeleteAct",
			Handler:    _CatalogService_DeleteAct_Handler,
		},
		{
			MethodName: "CreateMany",
			Handler:    _CatalogService_CreateMany_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "catalog/catalog.proto",
}
