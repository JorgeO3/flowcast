package utils

import (
	"context"
	"fmt"
	"strings"
	"time"

	"github.com/JorgeO3/flowcast/internal/catalog/entity"
	"github.com/JorgeO3/flowcast/internal/catalog/errors"
	"github.com/JorgeO3/flowcast/internal/catalog/repository/assets"
	"github.com/JorgeO3/flowcast/internal/catalog/repository/rawaudio"
)

const (
	// RawAudioBucketName represents the name of the bucket for raw audio files
	RawAudioBucketName = "raw-audio"
	// AssetsBucketName represents the name of the bucket for assets
	AssetsBucketName = "assets"

	// URLExpirationTime represents the expiration time for the presigned URL
	URLExpirationTime = time.Minute
)

type (
	// AssetURL represents the URL of an asset
	AssetURL struct {
		URL  string           `json:"url"`
		Name string           `json:"name"`
		Type entity.AssetType `json:"type"`
	}

	// SongURL represents the URL of an audio file
	SongURL struct {
		URL  string `json:"url"`
		Name string `json:"name"`
	}
)

// NewAssetURL creates a new AssetURL
func NewAssetURL(url, name string, assetType entity.AssetType) *AssetURL {
	return &AssetURL{URL: url, Name: name, Type: assetType}
}

func createPresignedURL(ctx context.Context, repo interface{}, filePath string) (string, error) {
	switch r := repo.(type) {
	case assets.Repository:
		return r.GeneratePresignedURL(ctx, filePath, URLExpirationTime)
	case rawaudio.Repository:
		return r.GeneratePresignedURL(ctx, filePath, URLExpirationTime)
	default:
		return "", fmt.Errorf("unsupported repository type")
	}
}

// CreateImageFileURL creates a presigned URL for an image file
func CreateImageFileURL(ctx context.Context, bucket, actID, albumID, songID string, assetRepo assets.Repository) (string, error) {
	segments := []string{bucket, actID, albumID, songID}

	filePath := ""
	for _, segment := range segments {
		if segment != "" {
			filePath += fmt.Sprintf("%s/", segment)
		}
	}
	strings.TrimSuffix(filePath, "/")
	filePath += ".jpg"

	return createPresignedURL(ctx, assetRepo, filePath)
}

// CreateAudioFileURL creates a presigned URL for the raw audio bucket.
func CreateAudioFileURL(ctx context.Context, bucket, actID, albumID, songID string, audioRepo rawaudio.Repository) (string, error) {
	return createPresignedURL(ctx, audioRepo, fmt.Sprintf("%s/%s/%s/%s.wav", bucket, actID, albumID, songID))
}

// CreateImageForAssetsBucket creates a presigned URL for an image file in the assets bucket
func CreateImageForAssetsBucket(ctx context.Context, actID, albumID, songID string, assetRepo assets.Repository) (string, error) {
	return CreateImageFileURL(ctx, AssetsBucketName, actID, albumID, songID, assetRepo)
}

// CreateAudioForRawAudioBucket creates a presigned URL for an audio file in the raw audio bucket
func CreateAudioForRawAudioBucket(ctx context.Context, actID, albumID, songID string, audioRepo rawaudio.Repository) (string, error) {
	return CreateAudioFileURL(ctx, RawAudioBucketName, actID, albumID, songID, audioRepo)
}

// CreateCoverImageURLsForActs creates presigned URLs for the cover images of acts
func CreateCoverImageURLsForActs(ctx context.Context, acts []*entity.Act, bucket string, assetRepo assets.Repository) ([]string, error) {
	imageURLs := make([]string, len(acts))
	for i, act := range acts {
		url, err := CreateImageFileURL(ctx, bucket, act.ID.Hex(), "", "", assetRepo)
		if err != nil {
			return nil, err
		}
		imageURLs[i] = url
	}
	return imageURLs, nil
}

// CreateRawAudioFileURL creates a presigned URL for a raw audio file
func CreateRawAudioFileURL(ctx context.Context, actID, albumID, songID string, audioRepo rawaudio.Repository) (string, error) {
	return CreateAudioFileURL(ctx, RawAudioBucketName, actID, albumID, songID, audioRepo)
}

// CreateAudioFileURLsForAlbum creates presigned URLs for the audio files of an album
func CreateAudioFileURLsForAlbum(ctx context.Context, album *entity.Album, bucket, actID string, audioRepo rawaudio.Repository) ([]SongURL, error) {
	audioFileInfos := make([]SongURL, len(album.Songs))
	for i, song := range album.Songs {
		url, err := CreateAudioFileURL(ctx, bucket, actID, album.ID.Hex(), song.ID.Hex(), audioRepo)
		if err != nil {
			return nil, err
		}
		audioFileInfos[i] = SongURL{URL: url, Name: song.File.Name}
	}
	return audioFileInfos, nil
}

// CreateAudioFileURLsForAct creates presigned URLs for the audio files of an act
func CreateAudioFileURLsForAct(ctx context.Context, bucket string, act *entity.Act, audioRepo rawaudio.Repository) ([]SongURL, error) {
	audioFileInfos := make([]SongURL, 0, act.SongsLength())
	for _, album := range act.Albums {
		albumAudioInfos, err := CreateAudioFileURLsForAlbum(ctx, &album, bucket, act.ID.Hex(), audioRepo)
		if err != nil {
			return nil, errors.NewInternal("error creating presigned URL", err)
		}
		audioFileInfos = append(audioFileInfos, albumAudioInfos...)
	}
	return audioFileInfos, nil
}

// CreateAudioFileURLsForActs creates presigned URLs for the audio files of acts
func CreateAudioFileURLsForActs(ctx context.Context, acts []*entity.Act, bucket string, audioRepo rawaudio.Repository) ([]SongURL, error) {
	var allAudioFileInfos []SongURL
	for _, act := range acts {
		actAudioInfos, err := CreateAudioFileURLsForAct(ctx, bucket, act, audioRepo)
		if err != nil {
			return nil, err
		}
		allAudioFileInfos = append(allAudioFileInfos, actAudioInfos...)
	}
	return allAudioFileInfos, nil
}
