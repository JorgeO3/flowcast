name: flowcast
services:
  catalog-storage-service:
    image: mongo
    restart: always
    ports:
      - ${CATALOG_STORAGE_PORT}:27017
    volumes:
      - ./data/mongo_data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${CATALOG_STORAGE_ROOT_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${CATALOG_STORAGE_ROOT_PASSWORD}
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s

  raw-audio-storage-service:
    image: bitnami/minio:2024.10.13
    ports:
      - ${RAW_AUDIO_STORAGE_WEB_PORT}:9000
      - ${RAW_AUDIO_STORAGE_API_PORT}:9001
    volumes:
      - ${RAW_AUDIO_STORAGE_DATA_DIR}:/data
    environment:
      MINIO_ROOT_USER: ${RAW_AUDIO_STORAGE_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${RAW_AUDIO_STORAGE_ROOT_PASSWORD}
      MINIO_DEFAULT_BUCKETS: ${RAW_AUDIO_STORAGE_DEFAULT_BUCKETS}

  encoded-opus-storage-service:
    image: bitnami/minio:2024.10.13
    ports:
      - ${ENCODED_OPUS_STORAGE_WEB_PORT}:9000
      - ${ENCODED_OPUS_STORAGE_API_PORT}:9001
    volumes:
      - ${ENCODED_OPUS_STORAGE_DATA_DIR}:/data
    environment:
      MINIO_ROOT_USER: ${ENCODED_OPUS_STORAGE_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${ENCODED_OPUS_STORAGE_ROOT_PASSWORD}
      MINIO_DEFAULT_BUCKETS: ${ENCODED_OPUS_STORAGE_DEFAULT_BUCKETS}

  assets-storage-service:
    image: bitnami/minio:2024.10.13
    ports:
      - ${ASSETS_STORAGE_WEB_PORT}:9000
      - ${ASSETS_STORAGE_API_PORT}:9001
    volumes:
      - ${ASSETS_STORAGE_DATA_DIR}:/data
    environment:
      MINIO_ROOT_USER: ${ASSETS_STORAGE_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${ASSETS_STORAGE_ROOT_PASSWORD}
      MINIO_DEFAULT_BUCKETS: ${ASSETS_STORAGE_DEFAULT_BUCKETS}

  audsync-storage-service:
    image: postgres:16.4-bookworm
    ports:
      - ${SYNC_STORAGE_PORT}:5432
    environment:
      POSTGRES_USER: ${SYNC_STORAGE_USER}
      POSTGRES_PASSWORD: ${SYNC_STORAGE_PASSWORD}
      POSTGRES_DB: ${SYNC_STORAGE_DB}
    volumes:
      - ${SYNC_STORAGE_DATA_DIR}:/var/lib/postgresql/data

  redpanda:
    command:
      - redpanda
      - start
      - --kafka-addr internal://${REDPANDA_KAFKA_INTERNAL_ADDR},external://${REDPANDA_KAFKA_EXTERNAL_ADDR}
      - --advertise-kafka-addr internal://${REDPANDA_KAFKA_ADVERTISE_INTERNAL_ADDR},external://${REDPANDA_KAFKA_ADVERTISE_EXTERNAL_ADDR}
      - --pandaproxy-addr internal://${REDPANDA_PANDAPROXY_INTERNAL_ADDR},external://${REDPANDA_PANDAPROXY_EXTERNAL_ADDR}
      - --advertise-pandaproxy-addr internal://${REDPANDA_PANDAPROXY_ADVERTISE_INTERNAL_ADDR},external://${REDPANDA_PANDAPROXY_ADVERTISE_EXTERNAL_ADDR}
      - --schema-registry-addr internal://${REDPANDA_SCHEMA_REGISTRY_INTERNAL_ADDR},external://${REDPANDA_SCHEMA_REGISTRY_EXTERNAL_ADDR}
      - --rpc-addr ${REDPANDA_RPC_ADDR}
      - --advertise-rpc-addr ${REDPANDA_ADVERTISE_RPC_ADDR}
      - --mode ${REDPANDA_MODE}
      - --smp ${REDPANDA_SMP}
      - --default-log-level=${REDPANDA_LOG_LEVEL}
    image: ${REDPANDA_IMAGE}
    volumes:
      - redpanda:${REDPANDA_DATA_DIR}
    networks:
      - redpanda_network
    ports:
      - ${REDPANDA_SCHEMA_REGISTRY_PORT}:${REDPANDA_SCHEMA_REGISTRY_PORT}
      - ${REDPANDA_PANDAPROXY_PORT}:${REDPANDA_PANDAPROXY_PORT}
      - ${REDPANDA_KAFKA_PORT}:${REDPANDA_KAFKA_PORT}
      - ${REDPANDA_ADMIN_PORT}:${REDPANDA_INTERNAL_ADMIN_PORT}

  redpanda-console:
    image: docker.redpanda.com/redpandadata/console:v2.7.2
    networks:
      - redpanda_network
    entrypoint: /bin/sh
    command: -c 'echo "$$CONSOLE_CONFIG_FILE" > /tmp/config.yml; /app/console'
    environment:
      CONFIG_FILEPATH: ${CONSOLE_CONFIG_FILEPATH}
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["${REDPANDA_KAFKA_ADVERTISE_INTERNAL_ADDR}"]
          schemaRegistry:
            enabled: true
            urls: ["http://${CONSOLE_SCHEMA_REGISTRY_ADDR}"]
        redpanda:
          adminApi:
            enabled: true
            urls: ["http://${CONSOLE_RPC_ADDR}"]
    ports:
      - ${CONSOLE_PORT}:8080
    depends_on:
      - redpanda

  envoy:
    image: envoyproxy/envoy:v1.31.2
    ports:
      - ${ENVOY_HTTP_PORT}:${ENVOY_HTTP_PORT}
      - ${ENVOY_ADMIN_PORT}:${ENVOY_ADMIN_PORT}
    volumes:
      - ./envoy/envoy.yaml:/etc/envoy/envoy.yaml
    networks:
      - redpanda_network
    depends_on:
      - catalog-storage-service
      - raw-audio-storage-service
      - encoded-opus-storage-service
      - redpanda

networks:
  redpanda_network:
    driver: bridge
  minio_network:
    driver: bridge

volumes:
  redpanda: null